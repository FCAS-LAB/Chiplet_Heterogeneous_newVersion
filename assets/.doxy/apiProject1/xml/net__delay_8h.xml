<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="net__delay_8h" kind="file" language="C++">
    <compoundname>net_delay.h</compoundname>
    <includes local="no">fstream</includes>
    <includes local="no">map</includes>
    <includes refid="global__define_8h" local="yes">global_define.h</includes>
    <includes local="yes">spdlog/spdlog.h</includes>
    <includedby refid="cmd__handler_8h" local="yes">/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h</includedby>
    <incdepgraph>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="1">
        <label>/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h</label>
        <link refid="net__delay_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="2">
        <label>fstream</label>
      </node>
      <node id="8">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="4">
        <label>global_define.h</label>
        <link refid="global__define_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h</label>
        <link refid="net__delay_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h</label>
        <link refid="cmd__handler_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classNetworkDelayItem" prot="public">NetworkDelayItem</innerclass>
    <innerclass refid="classNetworkDelayMap" prot="public">NetworkDelayMap</innerclass>
    <innerclass refid="classNetworkDelayStruct" prot="public">NetworkDelayStruct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="net__delay_8h_1a8685de6e6074df3e62c767fcf0b8d886" prot="public" static="no">
        <name>PAC_PAYLOAD_BIT</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" line="9" column="9" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="net__delay_8h_1a48db85544f7162f62541900922dd71ab" prot="public" static="no">
        <name>PAC_PAYLOAD_BYTE</name>
        <initializer>(PAC_PAYLOAD_BIT / 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" line="10" column="9" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__delay_1gab2cadc5e1bdc6430743caafe1387f56b" prot="public" static="no">
        <name>SRC_DELAY</name>
        <param><defname>pair</defname></param>
        <initializer>std::get&lt;0&gt;(pair)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" line="110" column="9" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__delay_1gac5cfb612929f51312de05e4b4f9bb6a7" prot="public" static="no">
        <name>DST_DELAY</name>
        <param><defname>pair</defname></param>
        <initializer>std::get&lt;1&gt;(pair)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" line="111" column="9" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__net__delay_1gaeb778c7f99f3f6efe0ad6c8c2281f39f" prot="public" static="no">
        <type>std::tuple&lt; InterChiplet::InnerTimeType, InterChiplet::InnerTimeType &gt;</type>
        <definition>typedef std::tuple&lt;InterChiplet::InnerTimeType, InterChiplet::InnerTimeType&gt; CmdDelayPair</definition>
        <argsstring></argsstring>
        <name>CmdDelayPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" line="109" column="20" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__net__delay_1ga2dfd29a9edac013133f822214b69c2d7" prot="public" static="no">
        <type>std::multimap&lt; InterChiplet::InnerTimeType, <ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref> &gt;</type>
        <definition>typedef std::multimap&lt;InterChiplet::InnerTimeType, NetworkDelayItem&gt; NetworkDelayOrder</definition>
        <argsstring></argsstring>
        <name>NetworkDelayOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" line="112" column="23" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;global_define.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAC_PAYLOAD_BIT<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAC_PAYLOAD_BYTE<sp/>(PAC_PAYLOAD_BIT<sp/>/<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="classNetworkDelayItem" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25" refid="classNetworkDelayItem_1a868a2ce8f2042c918df8c3060cc6d1c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/><ref refid="classNetworkDelayItem_1a868a2ce8f2042c918df8c3060cc6d1c3" kindref="member">m_cycle</ref>;</highlight></codeline>
<codeline lineno="29" refid="classNetworkDelayItem_1a91078f792e54ead32258225929d653b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="classNetworkDelayItem_1a91078f792e54ead32258225929d653b2" kindref="member">m_id</ref>;</highlight></codeline>
<codeline lineno="33" refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>InterChiplet::AddrType<sp/><ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>;</highlight></codeline>
<codeline lineno="37" refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>InterChiplet::AddrType<sp/><ref refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" kindref="member">m_dst</ref>;</highlight></codeline>
<codeline lineno="41" refid="classNetworkDelayItem_1ae24f380a0fe7cfbc759f2a904a5fdf46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayItem_1ae24f380a0fe7cfbc759f2a904a5fdf46" kindref="member">m_desc</ref>;</highlight></codeline>
<codeline lineno="48" refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;InterChiplet::InnerTimeType&gt;<sp/><ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="54" refid="classNetworkDelayItem_1a169cdbfde5a4c11b89b20fa275fc8591" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayItem_1a169cdbfde5a4c11b89b20fa275fc8591" kindref="member">NetworkDelayItem</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classNetworkDelayItem_1afa76cb19b4b23bf3cd9f30aeac5d65c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayItem_1afa76cb19b4b23bf3cd9f30aeac5d65c5" kindref="member">NetworkDelayItem</ref>(InterChiplet::InnerTimeType<sp/>__cycle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__src,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__desc,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;InterChiplet::InnerTimeType&gt;&amp;<sp/>__delay_list)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classNetworkDelayItem_1a868a2ce8f2042c918df8c3060cc6d1c3" kindref="member">m_cycle</ref>(__cycle),<sp/><ref refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" kindref="member">m_dst</ref>(__dst),<sp/><ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>(__src),<sp/><ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>(__delay_list)<sp/>{}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classNetworkDelayItem_1a136796f32b6f19e903b10633ba782fbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="classNetworkDelayItem_1a136796f32b6f19e903b10633ba782fbd" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref>&amp;<sp/>__item)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>__item.<ref refid="classNetworkDelayItem_1a868a2ce8f2042c918df8c3060cc6d1c3" kindref="member">m_cycle</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>DIM_X(__item.<ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>DIM_Y(__item.<ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>DIM_Y(__item.<ref refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" kindref="member">m_dst</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>DIM_X(__item.<ref refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" kindref="member">m_dst</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__item.<ref refid="classNetworkDelayItem_1ae24f380a0fe7cfbc759f2a904a5fdf46" kindref="member">m_desc</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>__item.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>.size();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>delay<sp/>:<sp/>__item.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>delay;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classNetworkDelayItem_1af4f074546559613383491525a7c47038" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::istream&amp;<sp/><ref refid="classNetworkDelayItem_1af4f074546559613383491525a7c47038" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>os,<sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref>&amp;<sp/>__item)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&gt;&gt;<sp/>__item.<ref refid="classNetworkDelayItem_1a868a2ce8f2042c918df8c3060cc6d1c3" kindref="member">m_cycle</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>src_x,<sp/>src_y,<sp/>dst_x,<sp/>dst_y;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&gt;&gt;<sp/>src_x<sp/>&gt;&gt;<sp/>src_y<sp/>&gt;&gt;<sp/>dst_x<sp/>&gt;&gt;<sp/>dst_y;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__item.<ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>.push_back(src_x);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__item.<ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>.push_back(src_y);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__item.<ref refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" kindref="member">m_dst</ref>.push_back(dst_x);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__item.<ref refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" kindref="member">m_dst</ref>.push_back(dst_y);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&gt;&gt;<sp/>__item.<ref refid="classNetworkDelayItem_1ae24f380a0fe7cfbc759f2a904a5fdf46" kindref="member">m_desc</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delay_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&gt;&gt;<sp/>delay_cnt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>delay_cnt;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::TimeType<sp/>delay;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&gt;&gt;<sp/>delay;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__item.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>.push_back(delay);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::tuple&lt;InterChiplet::InnerTimeType,<sp/>InterChiplet::InnerTimeType&gt;<sp/>CmdDelayPair;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SRC_DELAY(pair)<sp/>std::get&lt;0&gt;(pair)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DST_DELAY(pair)<sp/>std::get&lt;1&gt;(pair)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::multimap&lt;InterChiplet::InnerTimeType,<sp/>NetworkDelayItem&gt;<sp/>NetworkDelayOrder;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classNetworkDelayMap" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNetworkDelayMap" kindref="compound">NetworkDelayMap</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::map&lt;InterChiplet::AddrType,<sp/>NetworkDelayOrder&gt;<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125" refid="classNetworkDelayMap_1ae83fe349535d2db5222fb0435b4980d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayMap_1ae83fe349535d2db5222fb0435b4980d4" kindref="member">insert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__addr,<sp/>InterChiplet::InnerTimeType<sp/>__cycle,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref>&amp;<sp/>__item)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(__addr)<sp/>==<sp/>end())<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[__addr]<sp/>=<sp/>NetworkDelayOrder();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[__addr].insert(</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;InterChiplet::InnerTimeType,<sp/>NetworkDelayItem&gt;(__cycle,<sp/>__item));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classNetworkDelayMap_1aa082126eff794b1db823dca0bd5f5bd4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayMap_1aa082126eff794b1db823dca0bd5f5bd4" kindref="member">hasAddr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__addr)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>address,<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(__addr)<sp/>==<sp/>end())<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>delay<sp/>information<sp/>for<sp/>the<sp/>address,<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at(__addr).size()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="classNetworkDelayMap_1a092035d7b57aa608ecd34c5c24b9f31e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayMap_1a092035d7b57aa608ecd34c5c24b9f31e" kindref="member">hasAddr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__src,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>address,<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(__addr)<sp/>==<sp/>end())<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>delay<sp/>information<sp/>for<sp/>the<sp/>address,<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NetworkDelayOrder::iterator<sp/>it<sp/>=<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[__addr].begin();<sp/>it<sp/>!=<sp/>(*this)[__addr].end();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.m_src<sp/>==<sp/>__src<sp/>&amp;&amp;<sp/>it-&gt;second.m_dst<sp/>==<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classNetworkDelayMap_1a2e19fdd61cf233c21fbbda42860dd621" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref><sp/><ref refid="classNetworkDelayMap_1a2e19fdd61cf233c21fbbda42860dd621" kindref="member">front</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__addr)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>destination<sp/>address,<sp/>return<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(__addr)<sp/>==<sp/>end())<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref>();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>delay<sp/>information<sp/>for<sp/>the<sp/>address,<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at(__addr).size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at(__addr).begin()-&gt;second;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classNetworkDelayMap_1a829408b81a4085a3a1a037d10e940df5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref><sp/><ref refid="classNetworkDelayMap_1a829408b81a4085a3a1a037d10e940df5" kindref="member">front</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__addr,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__src,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>destination<sp/>address,<sp/>return<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(__addr)<sp/>==<sp/>end())<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>delay<sp/>information<sp/>for<sp/>the<sp/>address,<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NetworkDelayOrder::iterator<sp/>it<sp/>=<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[__addr].begin();<sp/>it<sp/>!=<sp/>(*this)[__addr].end();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.m_src<sp/>==<sp/>__src<sp/>&amp;&amp;<sp/>it-&gt;second.m_dst<sp/>==<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="classNetworkDelayMap_1a9061483f1887de13b93a3ec11f2f4ece" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayMap_1a9061483f1887de13b93a3ec11f2f4ece" kindref="member">pop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__addr)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>destination<sp/>address,<sp/>do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(__addr)<sp/>==<sp/>end())<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>delay<sp/>information<sp/>for<sp/>the<sp/>address,<sp/>do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at(__addr).size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at(__addr).erase(at(__addr).begin());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classNetworkDelayMap_1a24ad0bc5d29dd2f94feb9c9eb5499e97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayMap_1a24ad0bc5d29dd2f94feb9c9eb5499e97" kindref="member">pop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__src,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>destination<sp/>address,<sp/>do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(__addr)<sp/>==<sp/>end())<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>delay<sp/>information<sp/>for<sp/>the<sp/>address,<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NetworkDelayOrder::iterator<sp/>it<sp/>=<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[__addr].begin();<sp/>it<sp/>!=<sp/>(*this)[__addr].end();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.m_src<sp/>==<sp/>__src<sp/>&amp;&amp;<sp/>it-&gt;second.m_dst<sp/>==<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[__addr].erase(it);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="classNetworkDelayMap_1ab3a369fd61a64b7cc6b6f5feba4f320c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayMap_1ab3a369fd61a64b7cc6b6f5feba4f320c" kindref="member">checkOrderOfCommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>source<sp/>does<sp/>not<sp/>exist,<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>)<sp/>==<sp/>end())<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>source<sp/>has<sp/>no<sp/>packet,<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>].size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref>&amp;<sp/>delay_item<sp/>=<sp/>(*this)[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>].begin()-&gt;second;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>true<sp/>if<sp/>command<sp/>matches<sp/>the<sp/>first<sp/>item<sp/>in<sp/>delay<sp/>information<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delay_item.<ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref><sp/>==<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>&amp;&amp;<sp/>delay_item.<ref refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" kindref="member">m_dst</ref><sp/>==<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay_item.<ref refid="classNetworkDelayItem_1ae24f380a0fe7cfbc759f2a904a5fdf46" kindref="member">m_desc</ref><sp/>==<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a08963d12f859e9816d3c94fb4cee69e6" kindref="member">m_desc</ref>)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::warn(</highlight><highlight class="stringliteral">&quot;Delay<sp/>info<sp/>from<sp/>{},{}<sp/>to<sp/>{},{}<sp/>with<sp/>flag<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>delay_item.<ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>[0],</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay_item.<ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>[1],<sp/>delay_item.<ref refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" kindref="member">m_dst</ref>[0],<sp/>delay_item.<ref refid="classNetworkDelayItem_1a222fc032f9f9613306769dcf7e6d8ab2" kindref="member">m_dst</ref>[1],</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay_item.<ref refid="classNetworkDelayItem_1ae24f380a0fe7cfbc759f2a904a5fdf46" kindref="member">m_desc</ref>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::warn(</highlight><highlight class="stringliteral">&quot;Command<sp/><sp/><sp/><sp/>from<sp/>{},{}<sp/>to<sp/>{},{}<sp/>with<sp/>flag<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>[0],</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>[1],<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>[0],<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>[1],<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a08963d12f859e9816d3c94fb4cee69e6" kindref="member">m_desc</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal">};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="classNetworkDelayStruct" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNetworkDelayStruct" kindref="compound">NetworkDelayStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayStruct" kindref="compound">NetworkDelayStruct</ref>()<sp/>:<sp/>m_item_count(0)<sp/>{}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_item_count;<sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="300" refid="classNetworkDelayStruct_1ab2efd84b08d70b8adc9bffba348c11cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayStruct_1ab2efd84b08d70b8adc9bffba348c11cd" kindref="member">loadDelayInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>__file_name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>__clock_rate)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>bench_if(__file_name,<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_item_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bench_if)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>item<sp/>from<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref><sp/>item;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bench_if<sp/>&gt;&gt;<sp/>item;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bench_if)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.<ref refid="classNetworkDelayItem_1a868a2ce8f2042c918df8c3060cc6d1c3" kindref="member">m_cycle</ref><sp/>=<sp/>item.m_cycle<sp/>/<sp/>__clock_rate;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>item.m_delay_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.m_delay_list[i]<sp/>=<sp/>item.m_delay_list[i]<sp/>/<sp/>__clock_rate;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_item_count<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Source<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_src_delay_map.<ref refid="classNetworkDelayMap_1ae83fe349535d2db5222fb0435b4980d4" kindref="member">insert</ref>(item.m_src,<sp/>item.m_cycle,<sp/>item);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ordering<sp/>of<sp/>barrier,<sp/>launch,<sp/>lock<sp/>and<sp/>unlock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item.m_desc<sp/>&amp;<sp/>0xF0000)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>end_cycle<sp/>=<sp/>item.m_cycle<sp/>+<sp/>item.m_delay_list[1];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item.m_desc<sp/>&amp;<sp/>InterChiplet::SPD_BARRIER)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_delay_map.<ref refid="classNetworkDelayMap_1ae83fe349535d2db5222fb0435b4980d4" kindref="member">insert</ref>(item.m_dst,<sp/>end_cycle,<sp/>item);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item.m_desc<sp/>&amp;<sp/>InterChiplet::SPD_LAUNCH)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_launch_delay_map.<ref refid="classNetworkDelayMap_1ae83fe349535d2db5222fb0435b4980d4" kindref="member">insert</ref>(item.m_dst,<sp/>end_cycle,<sp/>item);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item.m_desc<sp/>&amp;<sp/>InterChiplet::SPD_LOCK)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lock_delay_map.<ref refid="classNetworkDelayMap_1ae83fe349535d2db5222fb0435b4980d4" kindref="member">insert</ref>(item.m_dst,<sp/>end_cycle,<sp/>item);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item.m_desc<sp/>&amp;<sp/>InterChiplet::SPD_UNLOCK)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_unlock_delay_map.<ref refid="classNetworkDelayMap_1ae83fe349535d2db5222fb0435b4980d4" kindref="member">insert</ref>(item.m_dst,<sp/>end_cycle,<sp/>item);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="classNetworkDelayStruct_1a4c20d1d18c23145e264ffa0ab60e8fef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayStruct_1a4c20d1d18c23145e264ffa0ab60e8fef" kindref="member">checkOrderOfCommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_src_delay_map.<ref refid="classNetworkDelayMap_1ab3a369fd61a64b7cc6b6f5feba4f320c" kindref="member">checkOrderOfCommand</ref>(__cmd);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="classNetworkDelayStruct_1a429e2621b8233a7bd3b7261b52eb6124" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayStruct_1a429e2621b8233a7bd3b7261b52eb6124" kindref="member">clearDelayInfo</ref>()<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Launch<sp/>delay<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_src_delay_map.clear();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Launch<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_launch_delay_map.clear();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Barrier<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_delay_map.clear();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lock_delay_map.clear();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlock<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_unlock_delay_map.clear();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="365" refid="classNetworkDelayStruct_1a844532eb08b5e86be5050248f823ba42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayStruct_1a844532eb08b5e86be5050248f823ba42" kindref="member">hasLaunch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_launch_delay_map.<ref refid="classNetworkDelayMap_1aa082126eff794b1db823dca0bd5f5bd4" kindref="member">hasAddr</ref>(__dst);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="classNetworkDelayStruct_1abc1907b0617d01fd51ed9245ef0ae4e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>InterChiplet::AddrType<sp/><ref refid="classNetworkDelayStruct_1abc1907b0617d01fd51ed9245ef0ae4e1" kindref="member">frontLaunchSrc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_launch_delay_map.<ref refid="classNetworkDelayMap_1a2e19fdd61cf233c21fbbda42860dd621" kindref="member">front</ref>(__dst).<ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="classNetworkDelayStruct_1ad918c1d39242b1c02a6f4f75dabc79fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayStruct_1ad918c1d39242b1c02a6f4f75dabc79fa" kindref="member">popLaunch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst)<sp/>{<sp/>m_launch_delay_map.<ref refid="classNetworkDelayMap_1a9061483f1887de13b93a3ec11f2f4ece" kindref="member">pop</ref>(__dst);<sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="classNetworkDelayStruct_1aa7a3f6bf0debfbf45c681eb2e3826631" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayStruct_1aa7a3f6bf0debfbf45c681eb2e3826631" kindref="member">hasLock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_lock_delay_map.<ref refid="classNetworkDelayMap_1aa082126eff794b1db823dca0bd5f5bd4" kindref="member">hasAddr</ref>(__dst);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="classNetworkDelayStruct_1a4b035efd88ec2aa53f9dfe939c719344" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>InterChiplet::AddrType<sp/><ref refid="classNetworkDelayStruct_1a4b035efd88ec2aa53f9dfe939c719344" kindref="member">frontLockSrc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_lock_delay_map.<ref refid="classNetworkDelayMap_1a2e19fdd61cf233c21fbbda42860dd621" kindref="member">front</ref>(__dst).<ref refid="classNetworkDelayItem_1acf1163742d981a57a99a4f2d606326fc" kindref="member">m_src</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="classNetworkDelayStruct_1ad6cfb1909459937d5da20da5afcc6b75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayStruct_1ad6cfb1909459937d5da20da5afcc6b75" kindref="member">popLock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__dst)<sp/>{<sp/>m_lock_delay_map.<ref refid="classNetworkDelayMap_1a9061483f1887de13b93a3ec11f2f4ece" kindref="member">pop</ref>(__dst);<sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="419" refid="classNetworkDelayStruct_1a1437c12708f0b2f30119d34eea817cd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CmdDelayPair<sp/><ref refid="classNetworkDelayStruct_1a1437c12708f0b2f30119d34eea817cd5" kindref="member">getEndCycle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__write_cmd,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__read_cmd)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_src_delay_map.<ref refid="classNetworkDelayMap_1aa082126eff794b1db823dca0bd5f5bd4" kindref="member">hasAddr</ref>(__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>,<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>,<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>))<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classNetworkDelayStruct_1a41cc00355fade6fd90c531fe0f80255e" kindref="member">getDefaultEndCycle</ref>(__write_cmd,<sp/>__read_cmd);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref><sp/>delay_info<sp/>=</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_src_delay_map.<ref refid="classNetworkDelayMap_1a2e19fdd61cf233c21fbbda42860dd621" kindref="member">front</ref>(__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>,<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>,<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_src_delay_map.<ref refid="classNetworkDelayMap_1a9061483f1887de13b93a3ec11f2f4ece" kindref="member">pop</ref>(__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>,<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>,<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Launch/Barrier/Lock/Unlock<sp/>communication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a08963d12f859e9816d3c94fb4cee69e6" kindref="member">m_desc</ref><sp/>&amp;<sp/>(InterChiplet::SPD_LAUNCH<sp/>|<sp/>InterChiplet::SPD_BARRIER<sp/>|</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::SPD_LOCK<sp/>|<sp/>InterChiplet::SPD_UNLOCK))<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>pac_delay_src<sp/>=<sp/>delay_info.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>[0];</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>pac_delay_dst<sp/>=<sp/>delay_info.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>[1];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>write_end_time<sp/>=<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>+<sp/>pac_delay_src;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>read_end_time<sp/>=<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>+<sp/>pac_delay_dst;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>&gt;<sp/>read_end_time)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_end_time<sp/>=<sp/>__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acknowledge<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>ack_delay_src<sp/>=<sp/>delay_info.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>[2];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>ack_delay_dst<sp/>=<sp/>delay_info.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>[3];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_end_time<sp/>=<sp/>read_end_time<sp/>+<sp/>ack_delay_src;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_end_time<sp/>=<sp/>read_end_time<sp/>-<sp/>ack_delay_src<sp/>+<sp/>ack_delay_dst;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CmdDelayPair(write_end_time,<sp/>read_end_time);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>communication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>pac_delay_src<sp/>=<sp/>delay_info.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>[0];</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>pac_delay_dst<sp/>=<sp/>delay_info.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>[1];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>write_end_time<sp/>=<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>+<sp/>pac_delay_src;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>read_end_time<sp/>=<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>+<sp/>pac_delay_dst;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>&gt;<sp/>read_end_time)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_end_time<sp/>=<sp/>__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CmdDelayPair(write_end_time,<sp/>read_end_time);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>getBarrierCycle(</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;InterChiplet::SyncCommand&gt;&amp;<sp/>barrier_items)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>barrier_cycle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>barrier_items)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>t_cycle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_src_delay_map.<ref refid="classNetworkDelayMap_1aa082126eff794b1db823dca0bd5f5bd4" kindref="member">hasAddr</ref>(item.m_src,<sp/>item.m_src,<sp/>item.m_dst))<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_cycle<sp/>=<sp/><ref refid="classNetworkDelayStruct_1a41cc00355fade6fd90c531fe0f80255e" kindref="member">getDefaultEndCycle</ref>(item);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayItem" kindref="compound">NetworkDelayItem</ref><sp/>delay_info<sp/>=</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_src_delay_map.<ref refid="classNetworkDelayMap_1a2e19fdd61cf233c21fbbda42860dd621" kindref="member">front</ref>(item.m_src,<sp/>item.m_src,<sp/>item.m_dst);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_cycle<sp/>=<sp/>delay_info.<ref refid="classNetworkDelayItem_1a868a2ce8f2042c918df8c3060cc6d1c3" kindref="member">m_cycle</ref><sp/>+<sp/>delay_info.<ref refid="classNetworkDelayItem_1a51a7b2c0b5cb9dba0a14e6e7091fa56a" kindref="member">m_delay_list</ref>[1];</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t_cycle<sp/>&gt;<sp/>barrier_cycle)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier_cycle<sp/>=<sp/>t_cycle;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>barrier_cycle;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="489" refid="classNetworkDelayStruct_1a41cc00355fade6fd90c531fe0f80255e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/><ref refid="classNetworkDelayStruct_1a41cc00355fade6fd90c531fe0f80255e" kindref="member">getDefaultEndCycle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>write_cmd)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Get<sp/>more<sp/>accurate<sp/>end<sp/>cycle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pac_size<sp/>=<sp/>write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref><sp/>/<sp/>PAC_PAYLOAD_BYTE<sp/>+</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref><sp/>%<sp/>PAC_PAYLOAD_BYTE)<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>+<sp/>pac_size;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503" refid="classNetworkDelayStruct_1af63ef393b0c6258ba9c2fff5c80e25a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CmdDelayPair<sp/><ref refid="classNetworkDelayStruct_1af63ef393b0c6258ba9c2fff5c80e25a3" kindref="member">getDefaultEndCycle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>write_cmd,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>read_cmd)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Get<sp/>more<sp/>accurate<sp/>end<sp/>cycle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pac_size<sp/>=<sp/>write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref><sp/>/<sp/>PAC_PAYLOAD_BYTE<sp/>+</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref><sp/>%<sp/>PAC_PAYLOAD_BYTE)<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>&gt;=<sp/>read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CmdDelayPair(write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>+<sp/>pac_size,<sp/>write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>+<sp/>pac_size);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CmdDelayPair(read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>+<sp/>pac_size,<sp/>read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>+<sp/>pac_size);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_item_count;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayMap" kindref="compound">NetworkDelayMap</ref><sp/>m_src_delay_map;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayMap" kindref="compound">NetworkDelayMap</ref><sp/>m_launch_delay_map;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayMap" kindref="compound">NetworkDelayMap</ref><sp/>m_barrier_delay_map;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayMap" kindref="compound">NetworkDelayMap</ref><sp/>m_lock_delay_map;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayMap" kindref="compound">NetworkDelayMap</ref><sp/>m_unlock_delay_map;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/net_delay.h"/>
  </compounddef>
</doxygen>
