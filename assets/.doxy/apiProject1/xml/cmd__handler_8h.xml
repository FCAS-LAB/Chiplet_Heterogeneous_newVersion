<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="cmd__handler_8h" kind="file" language="C++">
    <compoundname>cmd_handler.h</compoundname>
    <includes local="no">list</includes>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="net__bench_8h" local="yes">net_bench.h</includes>
    <includes refid="net__delay_8h" local="yes">net_delay.h</includes>
    <includes refid="sync__protocol_8h" local="yes">sync_protocol.h</includes>
    <includedby refid="cmd__handler_8cpp" local="yes">/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp</includedby>
    <includedby refid="interchiplet_8cpp" local="yes">/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/interchiplet.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>list</label>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="14">
        <label>fcntl.h</label>
      </node>
      <node id="11">
        <label>net_delay.h</label>
        <link refid="net__delay_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="1">
        <label>/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h</label>
        <link refid="cmd__handler_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="15">
        <label>unistd.h</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="18">
        <label>sstream</label>
      </node>
      <node id="13">
        <label>sync_protocol.h</label>
        <link refid="sync__protocol_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>net_bench.h</label>
        <link refid="net__bench_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>global_define.h</label>
        <link refid="global__define_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="16">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innerclass refid="classSyncClockStruct" prot="public">SyncClockStruct</innerclass>
    <innerclass refid="classSyncPipeStruct" prot="public">SyncPipeStruct</innerclass>
    <innerclass refid="classSyncBarrierStruct" prot="public">SyncBarrierStruct</innerclass>
    <innerclass refid="classSyncLockStruct" prot="public">SyncLockStruct</innerclass>
    <innerclass refid="classSyncLaunchStruct" prot="public">SyncLaunchStruct</innerclass>
    <innerclass refid="classSyncCommStruct" prot="public">SyncCommStruct</innerclass>
    <innerclass refid="classSyncStruct" prot="public">SyncStruct</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &gt;</type>
        <definition>typedef std::vector&lt;InterChiplet::SyncCommand&gt; SyncCmdList</definition>
        <argsstring></argsstring>
        <name>SyncCmdList</name>
        <briefdescription>
<para>List of synchronization commands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="21" column="21" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cmd__handler__func_1ga9f5f262279de5a1783a4a7aac68bf700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_cycle_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_cycle_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle CYCLE command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="563" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="9" bodyend="13" declfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" declline="563" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cmd__handler__func_1gab6b5801bc0c69d9b5e235362a8a9affb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_pipe_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_pipe_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle PIPE command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="570" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="15" bodyend="38" declfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" declline="570" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cmd__handler__func_1gabf9f8fa7ebad414492b36076a04be37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_barrier_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_barrier_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle BARRIER command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="577" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="40" bodyend="59" declfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" declline="577" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cmd__handler__func_1gacc423e4f60f3a7349e92a9abe7473863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_lock_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_lock_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle LOCK command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="584" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="61" bodyend="109" declfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" declline="584" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cmd__handler__func_1ga7de5f42e7045a5cffcc47247dbcf8e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_unlock_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_unlock_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle UNLOCK command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="591" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="111" bodyend="160" declfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" declline="591" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cmd__handler__func_1gac8b6bb4538c28dac9a6eeda20cc32942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_launch_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_launch_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle LAUNCH command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="598" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="162" bodyend="194" declfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" declline="598" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cmd__handler__func_1ga93ecd3191d3a7e33f46457aff0525fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_waitlaunch_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_waitlaunch_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle WAITLAUNCH command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="605" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="196" bodyend="223" declfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" declline="605" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cmd__handler__func_1ga4224ecb6b21e3144a4343d9df9a94b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_read_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_read_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle READ command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="612" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="225" bodyend="252" declfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" declline="612" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cmd__handler__func_1ga2913c79ea81fd9e4a1b94678e7f53ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_write_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_write_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle WRITE command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" line="619" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="434" bodyend="473" declfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h" declline="619" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;net_bench.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;net_delay.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sync_protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;InterChiplet::SyncCommand&gt;<sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="classSyncClockStruct" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSyncClockStruct" kindref="compound">SyncClockStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>m_cycle;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncClockStruct" kindref="compound">SyncClockStruct</ref>()<sp/>:<sp/>m_cycle(0)<sp/>{}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update(InterChiplet::InnerTimeType<sp/>__cycle)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_cycle<sp/>&lt;<sp/>__cycle)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cycle<sp/>=<sp/>__cycle;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>InterChiplet::InnerTimeType<sp/>cycle()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_cycle;<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classSyncPipeStruct" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSyncPipeStruct" kindref="compound">SyncPipeStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>m_pipe_set;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insert(std::string&amp;<sp/>__name)<sp/>{<sp/>m_pipe_set.insert(__name);<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>__name)<sp/>{<sp/>m_pipe_set.insert(__name);<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::set&lt;std::string&gt;<sp/>pipeSet()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pipe_set;<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;std::string&gt;&amp;<sp/>pipeSet()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pipe_set;<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classSyncBarrierStruct" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSyncBarrierStruct" kindref="compound">SyncBarrierStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>int&gt;<sp/>m_barrier_count_map;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>SyncCmdList&gt;<sp/>m_barrier_items_map;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertBarrier(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__count)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exist<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_barrier_count_map.find(__uid)<sp/>!=<sp/>m_barrier_count_map.end())<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>barrier<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_count_map[__uid]<sp/>=<sp/>__count;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_count_map[__uid]<sp/>=<sp/>__count;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_items_map[__uid]<sp/>=<sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertBarrier(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exist<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_barrier_count_map.find(__uid)<sp/>!=<sp/>m_barrier_count_map.end())<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>barrier<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_count_map[__uid]<sp/>=<sp/>__count;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_count_map[__uid]<sp/>=<sp/>__count;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_items_map[__uid]<sp/>=<sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_items_map[__uid].push_back(__cmd);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overflow(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>Barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_barrier_count_map.find(__uid)<sp/>==<sp/>m_barrier_count_map.end())<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exist<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_barrier_items_map[__uid].size()<sp/>&gt;=<sp/>m_barrier_count_map[__uid];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>barrierCmd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_barrier_items_map[__uid];<sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_barrier_count_map.find(__uid)<sp/>!=<sp/>m_barrier_count_map.end())<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrier_items_map[__uid].clear();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="classSyncLockStruct" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSyncLockStruct" kindref="compound">SyncLockStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>m_lock_set;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>InterChiplet::SyncCommand&gt;<sp/>m_last_cmd_map;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>SyncCmdList&gt;<sp/>m_lock_cmd_list;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLocked(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_lock_set.find(__uid)<sp/>!=<sp/>m_lock_set.end();<sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lock(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isLocked(__uid))<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lock_set.insert(__uid);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_last_cmd_map[__uid]<sp/>=<sp/>__cmd;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlock(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLocked(__uid))<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lock_set.erase(__uid);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_last_cmd_map[__uid]<sp/>=<sp/>__cmd;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasLastCmd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_last_cmd_map.find(__uid)<sp/>!=<sp/>m_last_cmd_map.end();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>getLastCmd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasLastCmd(__uid))<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_last_cmd_map[__uid];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertLockCmd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lock_cmd_list.find(__uid)<sp/>==<sp/>m_lock_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lock_cmd_list[__uid]<sp/>=<sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lock_cmd_list[__uid].push_back(__cmd);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasLockCmd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lock_cmd_list.find(__uid)<sp/>==<sp/>m_lock_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_lock_cmd_list[__uid].size()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasLockCmd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__src)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lock_cmd_list.find(__uid)<sp/>==<sp/>m_lock_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lock_cmd_list[__uid].size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_lock_cmd_list[__uid];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SyncCmdList::iterator<sp/>it<sp/>=<sp/>cmd_list.begin();<sp/>it<sp/>!=<sp/>cmd_list.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;m_src<sp/>==<sp/>__src)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>popLockCmd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lock_cmd_list.find(__uid)<sp/>==<sp/>m_lock_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lock_cmd_list[__uid].size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>command<sp/>=<sp/>m_lock_cmd_list[__uid].front();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lock_cmd_list[__uid].erase(m_lock_cmd_list[__uid].begin());</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>command;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>popLockCmd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__uid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterChiplet::AddrType&amp;<sp/>__src)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lock_cmd_list.find(__uid)<sp/>==<sp/>m_lock_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lock_cmd_list[__uid].size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_lock_cmd_list[__uid];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SyncCmdList::iterator<sp/>it<sp/>=<sp/>cmd_list.begin();<sp/>it<sp/>!=<sp/>cmd_list.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;m_src<sp/>==<sp/>__src)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>cmd<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_list.erase(it);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmd;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal">};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classSyncLaunchStruct" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSyncLaunchStruct" kindref="compound">SyncLaunchStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;InterChiplet::AddrType,<sp/>SyncCmdList&gt;<sp/>m_launch_cmd_list;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;InterChiplet::AddrType,<sp/>SyncCmdList&gt;<sp/>m_waitlaunch_cmd_list;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMatchWaitlaunch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_waitlaunch_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_waitlaunch_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_waitlaunch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cmd_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__waitlaunch_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UNSPECIFIED_ADDR(__waitlaunch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>))<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__waitlaunch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__waitlaunch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__waitlaunch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>popMatchWaitlaunch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_waitlaunch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cmd_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__waitlaunch_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UNSPECIFIED_ADDR(__waitlaunch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>))<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__waitlaunch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>match_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_list.erase(cmd_list.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match_cmd;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__waitlaunch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__waitlaunch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>match_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_list.erase(cmd_list.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match_cmd;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertWaitlaunch(<ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_waitlaunch_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_waitlaunch_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_waitlaunch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>]<sp/>=<sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_waitlaunch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>].push_back(__cmd);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertWaitlaunch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_waitlaunch_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_waitlaunch_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_waitlaunch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>]<sp/>=<sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_waitlaunch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>].push_back(__cmd);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMatchLaunch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_launch_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_launch_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_launch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cmd_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__launch_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UNSPECIFIED_ADDR(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>))<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>&amp;&amp;<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>popMatchLaunch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_launch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cmd_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__launch_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UNSPECIFIED_ADDR(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>))<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>match_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_list.erase(cmd_list.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match_cmd;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>&amp;&amp;<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>match_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_list.erase(cmd_list.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match_cmd;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertLaunch(<ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_launch_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_launch_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_launch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>]<sp/>=<sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_launch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>].push_back(__cmd);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertLaunch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_launch_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_launch_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_launch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>]<sp/>=<sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_launch_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>].push_back(__cmd);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal">};</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="classSyncCommStruct" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSyncCommStruct" kindref="compound">SyncCommStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;InterChiplet::AddrType,<sp/>SyncCmdList&gt;<sp/>m_read_cmd_list;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;InterChiplet::AddrType,<sp/>SyncCmdList&gt;<sp/>m_write_cmd_list;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMatchWrite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_write_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_write_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_write_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cmd_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__write_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>&amp;&amp;<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref><sp/>==<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>popMatchWrite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_write_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>];</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cmd_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__write_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>&amp;&amp;<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref><sp/>==<sp/>__write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>match_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_list.erase(cmd_list.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match_cmd;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertWrite(<ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_write_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_write_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_write_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>]<sp/>=<sp/>std::vector&lt;InterChiplet::SyncCommand&gt;();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_write_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>].push_back(__cmd);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertWrite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_write_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_write_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_write_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>]<sp/>=<sp/>std::vector&lt;InterChiplet::SyncCommand&gt;();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_write_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>].push_back(__cmd);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMatchRead(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_read_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_read_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_read_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>];</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cmd_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__read_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>&amp;&amp;<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref><sp/>==<sp/>__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>popMatchRead(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cmd__handler__struct_1gae80febffec287d8ba0cccc9d2d6bb4e7" kindref="member">SyncCmdList</ref>&amp;<sp/>cmd_list<sp/>=<sp/>m_read_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>];</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cmd_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__read_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>&amp;&amp;<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>==<sp/>__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref><sp/>==<sp/>__read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>match_cmd<sp/>=<sp/>cmd_list[i];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_list.erase(cmd_list.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match_cmd;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertRead(<ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_read_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_read_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_read_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>]<sp/>=<sp/>std::vector&lt;InterChiplet::SyncCommand&gt;();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_read_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>].push_back(__cmd);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertRead(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_read_cmd_list.find(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>m_read_cmd_list.end())<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_read_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>]<sp/>=<sp/>std::vector&lt;InterChiplet::SyncCommand&gt;();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_read_cmd_list[__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>].push_back(__cmd);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal">};</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="classSyncStruct" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="485" refid="classSyncStruct_1aef6affcf15b1fbed554705dd2a96eea9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncStruct_1aef6affcf15b1fbed554705dd2a96eea9" kindref="member">SyncStruct</ref>()<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_mutex_init(&amp;<ref refid="classSyncStruct_1ab0784758232d1077d94e7b3f6f1e04d8" kindref="member">m_mutex</ref>,<sp/>NULL)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;pthread_mutex_init&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="classSyncStruct_1a49ede67e9da5394d01f24686f0b189d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncStruct_1a49ede67e9da5394d01f24686f0b189d6" kindref="member">~SyncStruct</ref>()<sp/>{<sp/>pthread_mutex_destroy(&amp;<ref refid="classSyncStruct_1ab0784758232d1077d94e7b3f6f1e04d8" kindref="member">m_mutex</ref>);<sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="503" refid="classSyncStruct_1ab0784758232d1077d94e7b3f6f1e04d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_t<sp/><ref refid="classSyncStruct_1ab0784758232d1077d94e7b3f6f1e04d8" kindref="member">m_mutex</ref>;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="classSyncStruct_1a58c20d17738f1be24fb705ffce7e26fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkBenchList" kindref="compound">NetworkBenchList</ref><sp/><ref refid="classSyncStruct_1a58c20d17738f1be24fb705ffce7e26fe" kindref="member">m_bench_list</ref>;</highlight></codeline>
<codeline lineno="512" refid="classSyncStruct_1aec2ae24d772ee5796089fa4681ba9312" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNetworkDelayStruct" kindref="compound">NetworkDelayStruct</ref><sp/><ref refid="classSyncStruct_1aec2ae24d772ee5796089fa4681ba9312" kindref="member">m_delay_list</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="classSyncStruct_1abf7092297106c20b1554aa92880854d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncClockStruct" kindref="compound">SyncClockStruct</ref><sp/><ref refid="classSyncStruct_1abf7092297106c20b1554aa92880854d0" kindref="member">m_cycle_struct</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="classSyncStruct_1a0761f48edea1b09a0f53e63fe65822cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncPipeStruct" kindref="compound">SyncPipeStruct</ref><sp/><ref refid="classSyncStruct_1a0761f48edea1b09a0f53e63fe65822cf" kindref="member">m_pipe_struct</ref>;</highlight></codeline>
<codeline lineno="526" refid="classSyncStruct_1a474d4a498dbc485b1502aad9d9c1fbb3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncBarrierStruct" kindref="compound">SyncBarrierStruct</ref><sp/><ref refid="classSyncStruct_1a474d4a498dbc485b1502aad9d9c1fbb3" kindref="member">m_barrier_struct</ref>;</highlight></codeline>
<codeline lineno="530" refid="classSyncStruct_1a9f79ca61fbd5ed762e7af4170843aabc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncLockStruct" kindref="compound">SyncLockStruct</ref><sp/><ref refid="classSyncStruct_1a9f79ca61fbd5ed762e7af4170843aabc" kindref="member">m_lock_struct</ref>;</highlight></codeline>
<codeline lineno="534" refid="classSyncStruct_1a08246bffd7cff3408fc216829184b182" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncLaunchStruct" kindref="compound">SyncLaunchStruct</ref><sp/><ref refid="classSyncStruct_1a08246bffd7cff3408fc216829184b182" kindref="member">m_launch_struct</ref>;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="classSyncStruct_1ac7005430bf77963430f82297eeadb960" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncCommStruct" kindref="compound">SyncCommStruct</ref><sp/><ref refid="classSyncStruct_1ac7005430bf77963430f82297eeadb960" kindref="member">m_comm_struct</ref>;</highlight></codeline>
<codeline lineno="543" refid="classSyncStruct_1a2a7952e9de830668711d351b4f95210a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncBarrierStruct" kindref="compound">SyncBarrierStruct</ref><sp/><ref refid="classSyncStruct_1a2a7952e9de830668711d351b4f95210a" kindref="member">m_barrier_timing_struct</ref>;</highlight></codeline>
<codeline lineno="547" refid="classSyncStruct_1acfec8723a774fdf1f77773e5c0bbef1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSyncLockStruct" kindref="compound">SyncLockStruct</ref><sp/><ref refid="classSyncStruct_1acfec8723a774fdf1f77773e5c0bbef1a" kindref="member">m_lock_timing_struct</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">};</highlight></codeline>
<codeline lineno="563"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__func_1ga9f5f262279de5a1783a4a7aac68bf700" kindref="member">handle_cycle_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__func_1gab6b5801bc0c69d9b5e235362a8a9affb" kindref="member">handle_pipe_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__func_1gabf9f8fa7ebad414492b36076a04be37c" kindref="member">handle_barrier_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__func_1gacc423e4f60f3a7349e92a9abe7473863" kindref="member">handle_lock_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__func_1ga7de5f42e7045a5cffcc47247dbcf8e3b" kindref="member">handle_unlock_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__func_1gac8b6bb4538c28dac9a6eeda20cc32942" kindref="member">handle_launch_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__func_1ga93ecd3191d3a7e33f46457aff0525fba" kindref="member">handle_waitlaunch_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__func_1ga4224ecb6b21e3144a4343d9df9a94b70" kindref="member">handle_read_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmd__handler__func_1ga2913c79ea81fd9e4a1b94678e7f53ba4" kindref="member">handle_write_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct);</highlight></codeline>
    </programlisting>
    <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/includes/cmd_handler.h"/>
  </compounddef>
</doxygen>
