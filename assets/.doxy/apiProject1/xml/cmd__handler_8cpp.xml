<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="cmd__handler_8cpp" kind="file" language="C++">
    <compoundname>cmd_handler.cpp</compoundname>
    <includes refid="cmd__handler_8h" local="yes">cmd_handler.h</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="yes">spdlog/spdlog.h</includes>
    <incdepgraph>
      <node id="3">
        <label>list</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="15">
        <label>fcntl.h</label>
      </node>
      <node id="12">
        <label>net_delay.h</label>
        <link refid="net__delay_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="1">
        <label>/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp</label>
        <link refid="cmd__handler_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>fstream</label>
      </node>
      <node id="2">
        <label>cmd_handler.h</label>
        <link refid="cmd__handler_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="16">
        <label>unistd.h</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="19">
        <label>sstream</label>
      </node>
      <node id="14">
        <label>sync_protocol.h</label>
        <link refid="sync__protocol_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>net_bench.h</label>
        <link refid="net__bench_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>global_define.h</label>
        <link refid="global__define_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>set</label>
      </node>
      <node id="17">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cmd__handler_8cpp_1a9f5f262279de5a1783a4a7aac68bf700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_cycle_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_cycle_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle CYCLE command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="9" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="9" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1ab6b5801bc0c69d9b5e235362a8a9affb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_pipe_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_pipe_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle PIPE command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="15" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="15" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1abf9f8fa7ebad414492b36076a04be37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_barrier_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_barrier_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle BARRIER command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="40" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="40" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1acc423e4f60f3a7349e92a9abe7473863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_lock_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_lock_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle LOCK command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="61" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="61" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1a7de5f42e7045a5cffcc47247dbcf8e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_unlock_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_unlock_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle UNLOCK command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="111" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="111" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1ac8b6bb4538c28dac9a6eeda20cc32942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_launch_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_launch_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle LAUNCH command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="162" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="162" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1a93ecd3191d3a7e33f46457aff0525fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_waitlaunch_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_waitlaunch_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle WAITLAUNCH command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="196" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="196" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1a4224ecb6b21e3144a4343d9df9a94b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_read_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_read_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle READ command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="225" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="225" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1aadb90bcb4ae61bdfcdbca630cc30717c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_barrier_write_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_barrier_write_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle WRITE command with barrier flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="260" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="260" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1a05329837fe008ed3a076ae22715a9240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_lock_write_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_lock_write_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle WRITE command with LOCK flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="306" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="306" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1a4aa42c41c7341855a93b8465fc0881f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_unlock_write_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_unlock_write_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle WRITE command with UNLOCK flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="367" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="367" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="cmd__handler_8cpp_1a2913c79ea81fd9e4a1b94678e7f53ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_write_cmd</definition>
        <argsstring>(const InterChiplet::SyncCommand &amp;__cmd, SyncStruct *__sync_struct)</argsstring>
        <name>handle_write_cmd</name>
        <param>
          <type>const <ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref> &amp;</type>
          <declname>__cmd</declname>
        </param>
        <param>
          <type><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref> *</type>
          <declname>__sync_struct</declname>
        </param>
        <briefdescription>
<para>Handle WRITE command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sync_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to global synchronize structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" line="441" column="6" bodyfile="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp" bodystart="441" bodyend="481"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cmd_handler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_cycle_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>global<sp/>cycle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a211671b42dda80bc3fd56f60515d1de9" kindref="member">m_cycle_struct</ref>.update(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref>);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_pipe_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Pipe<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>file_name<sp/>=<sp/>InterChiplet::pipeName(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>,<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(access(file_name.c_str(),<sp/>F_OK)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>error<sp/>if<sp/>FIFO<sp/>file<sp/>does<sp/>not<sp/>exist<sp/>and<sp/>mkfifo<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mkfifo(file_name.c_str(),<sp/>0664)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::error(</highlight><highlight class="stringliteral">&quot;{}<sp/>Cannot<sp/>create<sp/>pipe<sp/>file<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),<sp/>file_name);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>file<sp/>name<sp/>in<sp/>pipe<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6f55842c8d4d0f9476b79d4dfb7997a4" kindref="member">m_pipe_struct</ref>.insert(file_name);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Create<sp/>pipe<sp/>file<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),<sp/>file_name);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reuse<sp/>exist<sp/>FIFO<sp/>and<sp/>reports.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Reuse<sp/>exist<sp/>pipe<sp/>file<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),<sp/>file_name);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>resp_file_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;../&quot;</highlight><highlight class="normal"><sp/>+<sp/>file_name;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,<sp/>{resp_file_name});</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_barrier_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uid<sp/>=<sp/>DIM_X(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6af7e29a25c5ac6adabfcedb2674e2d5" kindref="member">m_nbytes</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>BARRIER<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a00cb50c1f5c03ce50b43bdc31f9db511" kindref="member">m_barrier_struct</ref>.insertBarrier(uid,<sp/>count,<sp/>__cmd);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Barrier<sp/>override.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1a00cb50c1f5c03ce50b43bdc31f9db511" kindref="member">m_barrier_struct</ref>.overflow(uid))<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>command<sp/>to<sp/>each<sp/>barrier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a00cb50c1f5c03ce50b43bdc31f9db511" kindref="member">m_barrier_struct</ref>.barrierCmd(uid))<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(item.m_stdin_fd);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a00cb50c1f5c03ce50b43bdc31f9db511" kindref="member">m_barrier_struct</ref>.reset(uid);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>BARRIER<sp/>command.<sp/>Barrier<sp/>overflow.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>further<sp/>barrier<sp/>commands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>BARRIER<sp/>command.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_lock_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>mutex<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uid<sp/>=<sp/>DIM_X(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.isLocked(uid))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>locked,<sp/>check<sp/>whether<sp/>the<sp/>LOCK<sp/>command<sp/>comes<sp/>from<sp/>the<sp/>same<sp/>source.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.hasLastCmd(uid)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.getLastCmd(uid).<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>LOCK<sp/>command<sp/>comes<sp/>from<sp/>the<sp/>same<sp/>source,<sp/>ignore<sp/>the<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Mutex<sp/>{}<sp/>has<sp/>been<sp/>locked<sp/>by<sp/>the<sp/>same<sp/>source.<sp/>Do<sp/>nothing.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumpCmd(__cmd),<sp/>uid);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>command<sp/>to<sp/>response<sp/>UNLOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>pending<sp/>the<sp/>LOCK<sp/>command<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>unlocked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.insertLockCmd(uid,<sp/>__cmd);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>LOCK<sp/>command<sp/>to<sp/>wait<sp/>UNLOCK<sp/>command.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>not<sp/>locked,<sp/>whether<sp/>this<sp/>LOCK<sp/>command<sp/>can<sp/>be<sp/>response<sp/>dependes<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>order<sp/>determined<sp/>by<sp/>the<sp/>delay<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1a3e4f909a39d0df8a002f5da643e6a920" kindref="member">hasLock</ref>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>))<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>order<sp/>of<sp/>the<sp/>mutex<sp/>is<sp/>determined<sp/>by<sp/>the<sp/>delay<sp/>information,<sp/>check<sp/>whether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>source<sp/>address<sp/>of<sp/>this<sp/>LOCK<sp/>command<sp/>matches<sp/>the<sp/>order<sp/>determined<sp/>by<sp/>the<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1aa868a3f2848c1a18476cb769fd449946" kindref="member">frontLockSrc</ref>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>==<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>source<sp/>address<sp/>of<sp/>this<sp/>LOCK<sp/>command<sp/>matches<sp/>the<sp/>order<sp/>determined<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delay<sp/>information,<sp/>lock<sp/>the<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.lock(uid,<sp/>__cmd);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Lock<sp/>mutex<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),<sp/>uid);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>command<sp/>to<sp/>response<sp/>the<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pop<sp/>one<sp/>item<sp/>from<sp/>delay<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1af92e27edc0d28a8670a47e14ddd93461" kindref="member">popLock</ref>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>source<sp/>address<sp/>of<sp/>this<sp/>LOCK<sp/>command<sp/>does<sp/>not<sp/>match<sp/>the<sp/>order<sp/>determined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>delay<sp/>informtion,<sp/>pending<sp/>this<sp/>LOCK<sp/>command<sp/>until<sp/>the<sp/>correct<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.insertLockCmd(uid,<sp/>__cmd);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>LOCK<sp/>command<sp/>to<sp/>wait<sp/>correct<sp/>order.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>order<sp/>of<sp/>the<sp/>mutex<sp/>is<sp/>not<sp/>determined<sp/>by<sp/>the<sp/>delay<sp/>information,<sp/>lock<sp/>the<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.lock(uid,<sp/>__cmd);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Lock<sp/>mutex<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),<sp/>uid);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>command<sp/>to<sp/>response<sp/>the<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_unlock_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>mutex<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uid<sp/>=<sp/>DIM_X(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.isLocked(uid))<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>locked,<sp/>unlock<sp/>the<sp/>mutex<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.unlock(uid,<sp/>__cmd);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Unlock<sp/>mutex<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),<sp/>uid);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>command<sp/>to<sp/>response<sp/>UNLOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>the<sp/>mutex<sp/>by<sp/>pending<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1a3e4f909a39d0df8a002f5da643e6a920" kindref="member">hasLock</ref>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>))<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>order<sp/>of<sp/>the<sp/>mutex<sp/>is<sp/>determined<sp/>by<sp/>the<sp/>delay<sp/>information,<sp/>check<sp/>whether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>any<sp/>pending<sp/>LOCK<sp/>command<sp/>matching<sp/>the<sp/>order<sp/>determined<sp/>by<sp/>the<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::AddrType<sp/>order_src<sp/>=</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1aa868a3f2848c1a18476cb769fd449946" kindref="member">frontLockSrc</ref>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.hasLockCmd(uid,<sp/>order_src))<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>one<sp/>pending<sp/>LOCK<sp/>command<sp/>matching<sp/>the<sp/>order<sp/>determined<sp/>by<sp/>the<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>information.<sp/>Lock<sp/>the<sp/>mutex<sp/>by<sp/>this<sp/>pending<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>lock_cmd<sp/>=</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.popLockCmd(uid,<sp/>order_src);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.lock(uid,<sp/>lock_cmd);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;\t{}<sp/>Lock<sp/>mutex<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(lock_cmd),<sp/>uid);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>command<sp/>to<sp/>response<sp/>the<sp/>pending<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(lock_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pop<sp/>one<sp/>item<sp/>from<sp/>the<sp/>delay<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1af92e27edc0d28a8670a47e14ddd93461" kindref="member">popLock</ref>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>order<sp/>of<sp/>the<sp/>mutex<sp/>is<sp/>not<sp/>determined<sp/>by<sp/>the<sp/>delay<sp/>information,<sp/>check<sp/>whether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>any<sp/>pending<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.hasLockCmd(uid))<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>any<sp/>pending<sp/>LOCK<sp/>command,<sp/>lock<sp/>the<sp/>mutex<sp/>by<sp/>the<sp/>first<sp/>pending<sp/>LOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>lock_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.popLockCmd(uid);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1af7c650516318007616f6b240b1eda1de" kindref="member">m_lock_struct</ref>.lock(uid,<sp/>lock_cmd);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;\t{}<sp/>Lock<sp/>mutex<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(lock_cmd),<sp/>uid);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>command<sp/>to<sp/>response<sp/>the<sp/>pending<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(lock_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>unlocked,<sp/>ignore<sp/>the<sp/>UNLOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Mutex<sp/>{}<sp/>has<sp/>not<sp/>locked.<sp/>Do<sp/>nothing.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),<sp/>uid);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>command<sp/>to<sp/>response<sp/>UNLOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_launch_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>launch<sp/>order<sp/>and<sp/>remove<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1af77f4a956d61486fbf02e66515241e59" kindref="member">hasLaunch</ref>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>))<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1a1bfe8f2a1383ce4066c65b325b958e34" kindref="member">frontLaunchSrc</ref>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>)<sp/>!=<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a5b819b026086ed35e2f336a8d72d89ef" kindref="member">m_launch_struct</ref>.insertLaunch(__cmd);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>LAUNCH<sp/>command<sp/>to<sp/>pair<sp/>with<sp/>WAITLAUNCH<sp/>command.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>unconfirmed<sp/>waitlaunch<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_waitlaunch_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a5b819b026086ed35e2f336a8d72d89ef" kindref="member">m_launch_struct</ref>.hasMatchWaitlaunch(__cmd);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>waitlaunch_cmd<sp/>=</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a5b819b026086ed35e2f336a8d72d89ef" kindref="member">m_launch_struct</ref>.popMatchWaitlaunch(__cmd);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>not<sp/>waitlaunch<sp/>command,<sp/>waitlaunch<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_waitlaunch_cmd)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a5b819b026086ed35e2f336a8d72d89ef" kindref="member">m_launch_struct</ref>.insertLaunch(__cmd);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>LAUNCH<sp/>command<sp/>to<sp/>pair<sp/>with<sp/>WAITLAUNCH<sp/>command.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>waitlaunch<sp/>command,<sp/>response<sp/>launch<sp/>and<sp/>waitlaunch<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1a0250ce37f77eee4ed27c784444f58709" kindref="member">popLaunch</ref>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Pair<sp/>with<sp/>WAITLAUNCH<sp/>command.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>SYNC<sp/>to<sp/>response<sp/>LAUNCH<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>LAUNCH<sp/>to<sp/>response<sp/>WAITLAUNCH<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(waitlaunch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{DIM_X(__cmd.m_src),<sp/>DIM_Y(__cmd.m_src)});</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_waitlaunch_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>cmd<sp/>=<sp/>__cmd;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>launch<sp/>order<sp/>and<sp/>remove<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1af77f4a956d61486fbf02e66515241e59" kindref="member">hasLaunch</ref>(cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>))<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1a1bfe8f2a1383ce4066c65b325b958e34" kindref="member">frontLaunchSrc</ref>(cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>unconfirmed<sp/>waitlaunch<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_launch_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a5b819b026086ed35e2f336a8d72d89ef" kindref="member">m_launch_struct</ref>.hasMatchLaunch(cmd);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>launch_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a5b819b026086ed35e2f336a8d72d89ef" kindref="member">m_launch_struct</ref>.popMatchLaunch(cmd);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>not<sp/>waitlaunch<sp/>command,<sp/>waitlaunch<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_launch_cmd)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a5b819b026086ed35e2f336a8d72d89ef" kindref="member">m_launch_struct</ref>.insertWaitlaunch(__cmd);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>WAITLAUNCH<sp/>command<sp/>to<sp/>pair<sp/>with<sp/>LAUNCH<sp/>command.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(cmd));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1a0250ce37f77eee4ed27c784444f58709" kindref="member">popLaunch</ref>(cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Pair<sp/>with<sp/>LAUNCH<sp/>command<sp/>from<sp/>{},{}<sp/>to<sp/>{},{}.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(cmd),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DIM_X(launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>),<sp/>DIM_Y(launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>),<sp/>DIM_X(launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>),</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DIM_Y(launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>to<sp/>response<sp/>LAUNCH<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(launch_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>RESULT<sp/>to<sp/>response<sp/>WAITLAUNCH<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendResultCmd(cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{DIM_X(launch_cmd.m_src),<sp/>DIM_Y(launch_cmd.m_src)});</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_read_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>paired<sp/>write<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_write_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6d89c2ca5e58dc8c9dd57ca73ce36de6" kindref="member">m_comm_struct</ref>.hasMatchWrite(__cmd);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>write_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6d89c2ca5e58dc8c9dd57ca73ce36de6" kindref="member">m_comm_struct</ref>.popMatchWrite(__cmd);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_write_cmd)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>paired<sp/>write<sp/>command,<sp/>add<sp/>this<sp/>command<sp/>to<sp/>read<sp/>command<sp/>queue<sp/>to<sp/>wait.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6d89c2ca5e58dc8c9dd57ca73ce36de6" kindref="member">m_comm_struct</ref>.insertRead(__cmd);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>READ<sp/>command<sp/>to<sp/>pair<sp/>with<sp/>WRITE<sp/>command.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>event<sp/>to<sp/>benchmark<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1NetworkBenchItem" kindref="compound">InterChiplet::NetworkBenchItem</ref><sp/>bench_item(write_cmd,<sp/>__cmd);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a02090571fd56f15d4e0c9ee2b2aac906" kindref="member">m_bench_list</ref>.<ref refid="classInterChiplet_1_1NetworkBenchList_1a15eaf30b1268f85bc8d5474b43437da0" kindref="member">insert</ref>(bench_item);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>a<sp/>paired<sp/>write<sp/>command,<sp/>get<sp/>the<sp/>end<sp/>cycle<sp/>of<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::CmdDelayPair<sp/>end_cycle<sp/>=</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1ae2764b301540a58833cb8b29fb6427c2" kindref="member">getEndCycle</ref>(write_cmd,<sp/>__cmd);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Pair<sp/>with<sp/>WRITE<sp/>command.<sp/>Transation<sp/>ends<sp/>at<sp/>[{},{}]<sp/>cycle.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumpCmd(__cmd),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)),</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(DST_DELAY(end_cycle)));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>synchronize<sp/>command<sp/>to<sp/>response<sp/>READ<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DST_DELAY(end_cycle)<sp/>*<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1f222e5414af5fd0d4cf6977236086bc" kindref="member">m_clock_rate</ref>));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>synchronize<sp/>command<sp/>to<sp/>response<sp/>WRITE<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)<sp/>*<sp/>write_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1f222e5414af5fd0d4cf6977236086bc" kindref="member">m_clock_rate</ref>));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_barrier_write_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uid<sp/>=<sp/>DIM_X(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a08963d12f859e9816d3c94fb4cee69e6" kindref="member">m_desc</ref><sp/>&amp;<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>event<sp/>to<sp/>benchmark<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1NetworkBenchItem" kindref="compound">InterChiplet::NetworkBenchItem</ref><sp/>bench_item(__cmd);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a02090571fd56f15d4e0c9ee2b2aac906" kindref="member">m_bench_list</ref>.<ref refid="classInterChiplet_1_1NetworkBenchList_1a15eaf30b1268f85bc8d5474b43437da0" kindref="member">insert</ref>(bench_item);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>BARRIER<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6e8e1007522396c43bfa0b7f479a3d17" kindref="member">m_barrier_timing_struct</ref>.insertBarrier(uid,<sp/>count,<sp/>__cmd);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Barrier<sp/>override.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1a6e8e1007522396c43bfa0b7f479a3d17" kindref="member">m_barrier_timing_struct</ref>.overflow(uid))<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>barrier<sp/>overflow<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::InnerTimeType<sp/>barrier_cycle<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.getBarrierCycle(</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6e8e1007522396c43bfa0b7f479a3d17" kindref="member">m_barrier_timing_struct</ref>.barrierCmd(uid));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Barrier<sp/>overflow<sp/>at<sp/>{}<sp/>cycle.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(barrier_cycle));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>a<sp/>command<sp/>as<sp/>read<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>sync_cmd<sp/>=<sp/>__cmd;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sync_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>=<sp/>barrier_cycle;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>synchronization<sp/>command<sp/>to<sp/>all<sp/>barrier<sp/>items.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6e8e1007522396c43bfa0b7f479a3d17" kindref="member">m_barrier_timing_struct</ref>.barrierCmd(uid))<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::CmdDelayPair<sp/>end_cycle<sp/>=</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1ae2764b301540a58833cb8b29fb6427c2" kindref="member">getEndCycle</ref>(item,<sp/>sync_cmd);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;\t{}<sp/>Transaction<sp/>ends<sp/>at<sp/>{}<sp/>cycle.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(item),</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>synchronization<sp/>comand<sp/>to<sp/>response<sp/>WRITE<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.m_stdin_fd,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)<sp/>*<sp/>item.m_clock_rate));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6e8e1007522396c43bfa0b7f479a3d17" kindref="member">m_barrier_timing_struct</ref>.reset(uid);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>further<sp/>barrier<sp/>commands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>WRITE<sp/>command<sp/>with<sp/>BARRIER<sp/>flag.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_lock_write_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>mutex<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uid<sp/>=<sp/>DIM_X(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>event<sp/>to<sp/>benchmark<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1NetworkBenchItem" kindref="compound">InterChiplet::NetworkBenchItem</ref><sp/>bench_item(__cmd);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a02090571fd56f15d4e0c9ee2b2aac906" kindref="member">m_bench_list</ref>.<ref refid="classInterChiplet_1_1NetworkBenchList_1a15eaf30b1268f85bc8d5474b43437da0" kindref="member">insert</ref>(bench_item);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.isLocked(uid))<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>locked,<sp/>check<sp/>whether<sp/>the<sp/>WRITE(LOCK)<sp/>command<sp/>comes<sp/>from<sp/>the<sp/>same<sp/>source.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.hasLastCmd(uid)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.getLastCmd(uid).<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref><sp/>==<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1d0460fb9ad0590948de03987a29c222" kindref="member">m_src</ref>))<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>WRITE(LOCK)<sp/>command<sp/>comes<sp/>from<sp/>the<sp/>same<sp/>source,<sp/>ignore<sp/>the<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Response<sp/>this<sp/>WRITE(LOCK)<sp/>command<sp/>immediately<sp/>when<sp/>it<sp/>is<sp/>received<sp/>by<sp/>destination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::CmdDelayPair<sp/>end_cycle<sp/>=</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1ae2764b301540a58833cb8b29fb6427c2" kindref="member">getEndCycle</ref>(__cmd,<sp/>__cmd);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Transaction<sp/>ends<sp/>at<sp/>{}<sp/>cycle.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>SYNC<sp/>comand<sp/>with<sp/>end<sp/>cycle<sp/>to<sp/>response<sp/>WRITE<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)<sp/>*<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1f222e5414af5fd0d4cf6977236086bc" kindref="member">m_clock_rate</ref>));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>pending<sp/>the<sp/>LOCK<sp/>command<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>unlocked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.insertLockCmd(uid,<sp/>__cmd);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>WRITE<sp/>command<sp/>with<sp/>LOCK<sp/>flag.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>order<sp/>of<sp/>mutex<sp/>is<sp/>handled<sp/>by<sp/>LOCK/UNLOCK<sp/>command.<sp/>WRITE(LOCK)<sp/>command<sp/>can<sp/>lock<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mutex<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>last<sp/>command.<sp/>If<sp/>there<sp/>is<sp/>no<sp/>last<sp/>command,<sp/>use<sp/>this<sp/>WRITE(LOCK)<sp/>command<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>last_cmd<sp/>=<sp/>__cmd;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.hasLastCmd(uid))<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.getLastCmd(uid);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Response<sp/>this<sp/>WRITE(LOCK)<sp/>command<sp/>after<sp/>it<sp/>is<sp/>received<sp/>by<sp/>the<sp/>destination<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destination<sp/>finished<sp/>the<sp/>last<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::CmdDelayPair<sp/>end_cycle<sp/>=</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1ae2764b301540a58833cb8b29fb6427c2" kindref="member">getEndCycle</ref>(__cmd,<sp/>last_cmd);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>end<sp/>cycle<sp/>of<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>sync_cmd<sp/>=<sp/>__cmd;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sync_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>=<sp/>DST_DELAY(end_cycle);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>the<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.lock(uid,<sp/>sync_cmd);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Transaction<sp/>ends<sp/>at<sp/>{}<sp/>cycle.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)));</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>SYNC<sp/>comand<sp/>with<sp/>end<sp/>cycle<sp/>to<sp/>response<sp/>WRITE<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SRC_DELAY(end_cycle)<sp/>*<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1f222e5414af5fd0d4cf6977236086bc" kindref="member">m_clock_rate</ref>));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_unlock_write_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>mutex<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uid<sp/>=<sp/>DIM_X(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a6b92e06047a471a5c1360027b2af6fd0" kindref="member">m_dst</ref>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>event<sp/>to<sp/>benchmark<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1NetworkBenchItem" kindref="compound">InterChiplet::NetworkBenchItem</ref><sp/>bench_item(__cmd);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a02090571fd56f15d4e0c9ee2b2aac906" kindref="member">m_bench_list</ref>.<ref refid="classInterChiplet_1_1NetworkBenchList_1a15eaf30b1268f85bc8d5474b43437da0" kindref="member">insert</ref>(bench_item);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.isLocked(uid))<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>locked,<sp/>unlock<sp/>the<sp/>mutex<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>last<sp/>command.<sp/>If<sp/>there<sp/>is<sp/>no<sp/>last<sp/>command,<sp/>use<sp/>this<sp/>WRITE(UNLOCK)<sp/>command<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>last_cmd<sp/>=<sp/>__cmd;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.hasLastCmd(uid))<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.getLastCmd(uid);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Response<sp/>this<sp/>WRITE(UNLOCK)<sp/>command<sp/>after<sp/>it<sp/>is<sp/>received<sp/>by<sp/>the<sp/>destination<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destination<sp/>finished<sp/>the<sp/>last<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::CmdDelayPair<sp/>end_cycle<sp/>=</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1ae2764b301540a58833cb8b29fb6427c2" kindref="member">getEndCycle</ref>(__cmd,<sp/>last_cmd);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>end<sp/>cycle<sp/>of<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>sync_cmd<sp/>=<sp/>__cmd;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sync_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>=<sp/>DST_DELAY(end_cycle);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlock<sp/>the<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.unlock(uid,<sp/>sync_cmd);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Transaction<sp/>ends<sp/>at<sp/>{}<sp/>cycle.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>SYNC<sp/>comand<sp/>with<sp/>end<sp/>cycle<sp/>to<sp/>response<sp/>WRITE<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SRC_DELAY(end_cycle)<sp/>*<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1f222e5414af5fd0d4cf6977236086bc" kindref="member">m_clock_rate</ref>));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>the<sp/>mutex<sp/>by<sp/>pending<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>order<sp/>of<sp/>the<sp/>mutex<sp/>is<sp/>handled<sp/>by<sp/>LOCK/UNLOCK<sp/>commands.<sp/>WRITE(UNLOCK)<sp/>only<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>the<sp/>reorder<sp/>of<sp/>one<sp/>UNLOCK<sp/>command<sp/>with<sp/>pending<sp/>LOCK<sp/>commands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>there<sp/>is<sp/>any<sp/>pending<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.hasLockCmd(uid))<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>any<sp/>pending<sp/>LOCK<sp/>command,<sp/>lock<sp/>the<sp/>mutex<sp/>by<sp/>the<sp/>first<sp/>pending<sp/>LOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>lock_cmd<sp/>=</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.popLockCmd(uid);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Response<sp/>this<sp/>WRITE(LOCK)<sp/>command<sp/>after<sp/>it<sp/>is<sp/>received<sp/>by<sp/>the<sp/>destination<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destination<sp/>finished<sp/>the<sp/>WRITE(UNLOCK)<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::CmdDelayPair<sp/>end_cycle<sp/>=</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1ae2764b301540a58833cb8b29fb6427c2" kindref="member">getEndCycle</ref>(lock_cmd,<sp/>sync_cmd);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>end<sp/>cycle<sp/>of<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>sync_cmd<sp/>=<sp/>lock_cmd;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sync_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1aff99dff1a8a7a9736f85bbdf01b0f70a" kindref="member">m_cycle</ref><sp/>=<sp/>DST_DELAY(end_cycle);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lock<sp/>the<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1afa97486f7505c3986c6fb545d2eb7fdb" kindref="member">m_lock_timing_struct</ref>.lock(uid,<sp/>sync_cmd);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;\t{}<sp/>Transaction<sp/>ends<sp/>at<sp/>{}<sp/>cycle.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(lock_cmd),</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>SYNC<sp/>comand<sp/>with<sp/>end<sp/>cycle<sp/>to<sp/>response<sp/>pending<sp/>LOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lock_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)<sp/>*<sp/>lock_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1f222e5414af5fd0d4cf6977236086bc" kindref="member">m_clock_rate</ref>));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>unlocked,<sp/>ignore<sp/>the<sp/>UNLOCK<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Response<sp/>this<sp/>WRITE(UNLOCK)<sp/>command<sp/>immediately<sp/>when<sp/>it<sp/>is<sp/>received<sp/>by<sp/>destination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::CmdDelayPair<sp/>end_cycle<sp/>=</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1ae2764b301540a58833cb8b29fb6427c2" kindref="member">getEndCycle</ref>(__cmd,<sp/>__cmd);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Transaction<sp/>ends<sp/>at<sp/>{}<sp/>cycle.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd),</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>SYNC<sp/>comand<sp/>with<sp/>end<sp/>cycle<sp/>to<sp/>response<sp/>WRITE<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SRC_DELAY(end_cycle)<sp/>*<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1f222e5414af5fd0d4cf6977236086bc" kindref="member">m_clock_rate</ref>));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_write_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref>&amp;<sp/>__cmd,<sp/><ref refid="classSyncStruct" kindref="compound">SyncStruct</ref>*<sp/>__sync_struct)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a08963d12f859e9816d3c94fb4cee69e6" kindref="member">m_desc</ref><sp/>&amp;<sp/>InterChiplet::SPD_BARRIER)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>handle<sp/>WRITE<sp/>cmmand<sp/>after<sp/>BARRIER.<sp/>WRITE(BARRIER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_barrier_write_cmd(__cmd,<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a08963d12f859e9816d3c94fb4cee69e6" kindref="member">m_desc</ref><sp/>&amp;<sp/>InterChiplet::SPD_LOCK)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>handle<sp/>WRITE<sp/>cmmand<sp/>after<sp/>LOCK.<sp/>WRITE(LOCK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_lock_write_cmd(__cmd,<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a08963d12f859e9816d3c94fb4cee69e6" kindref="member">m_desc</ref><sp/>&amp;<sp/>InterChiplet::SPD_UNLOCK)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>handle<sp/>WRITE<sp/>cmmand<sp/>after<sp/>UNLOCK.<sp/>WRITE(UNLOCK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_unlock_write_cmd(__cmd,<sp/>__sync_struct);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>paired<sp/>read<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_read_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6d89c2ca5e58dc8c9dd57ca73ce36de6" kindref="member">m_comm_struct</ref>.hasMatchRead(__cmd);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1SyncCommand" kindref="compound">InterChiplet::SyncCommand</ref><sp/>read_cmd<sp/>=<sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6d89c2ca5e58dc8c9dd57ca73ce36de6" kindref="member">m_comm_struct</ref>.popMatchRead(__cmd);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_read_cmd)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>paired<sp/>read<sp/>command,<sp/>add<sp/>this<sp/>command<sp/>to<sp/>write<sp/>command<sp/>queue<sp/>to<sp/>wait.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a6d89c2ca5e58dc8c9dd57ca73ce36de6" kindref="member">m_comm_struct</ref>.insertWrite(__cmd);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Register<sp/>WRITE<sp/>command<sp/>to<sp/>pair<sp/>with<sp/>READ<sp/>command.&quot;</highlight><highlight class="normal">,<sp/>dumpCmd(__cmd));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>event<sp/>to<sp/>benchmark<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterChiplet_1_1NetworkBenchItem" kindref="compound">InterChiplet::NetworkBenchItem</ref><sp/>bench_item(__cmd,<sp/>read_cmd);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a02090571fd56f15d4e0c9ee2b2aac906" kindref="member">m_bench_list</ref>.<ref refid="classInterChiplet_1_1NetworkBenchList_1a15eaf30b1268f85bc8d5474b43437da0" kindref="member">insert</ref>(bench_item);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>a<sp/>paired<sp/>read<sp/>command,<sp/>get<sp/>the<sp/>end<sp/>cycle<sp/>of<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::CmdDelayPair<sp/>end_cycle<sp/>=</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__sync_struct-&gt;<ref refid="classSyncStruct_1a82bd706195fcab7791b119b4cf336380" kindref="member">m_delay_list</ref>.<ref refid="classInterChiplet_1_1NetworkDelayStruct_1ae2764b301540a58833cb8b29fb6427c2" kindref="member">getEndCycle</ref>(__cmd,<sp/>read_cmd);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>Pair<sp/>with<sp/>READ<sp/>command.<sp/>Transation<sp/>ends<sp/>at<sp/>[{},{}]<sp/>cycle.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumpCmd(__cmd),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SRC_DELAY(end_cycle)),</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(DST_DELAY(end_cycle)));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>synchronize<sp/>command<sp/>to<sp/>response<sp/>WRITE<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SRC_DELAY(end_cycle)<sp/>*<sp/>__cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1f222e5414af5fd0d4cf6977236086bc" kindref="member">m_clock_rate</ref>));</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>synchronize<sp/>command<sp/>to<sp/>response<sp/>READ<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterChiplet::sendSyncCmd(</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a37493b977cb7901455e9780e750455a6" kindref="member">m_stdin_fd</ref>,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InterChiplet::TimeType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(DST_DELAY(end_cycle)<sp/>*<sp/>read_cmd.<ref refid="classInterChiplet_1_1SyncCommand_1a1f222e5414af5fd0d4cf6977236086bc" kindref="member">m_clock_rate</ref>));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/data_sda/junwan02/legosim/Chiplet_Heterogeneous_newVersion/interchiplet/srcs/cmd_handler.cpp"/>
  </compounddef>
</doxygen>
